apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  annotations:
    fluxninja.com/blueprint-name: policies/service-protection/promql
    fluxninja.com/blueprints-uri: local
    fluxninja.com/values: '{"policy": {"evaluation_interval": "1s", "policy_name":
      "workload-prioritization-hasura", "promql_query": "pg_db_queries_per_second{db=\"hasura\"}",
      "resources": {"flow_control": {"classifiers": [{"rego": {"labels": {"operation":
      {"telemetry": true}, "source": {"telemetry": true}}, "module": "package hasura_example\nsource
      = input.attributes.source.source_fqdns[0]\noperation = graphql.parse_query(input.parsed_body.query).Operations[_].Operation\n"},
      "selectors": [{"control_point": "ingress", "service": "hasura.cloud.svc.cluster.local"}]}]},
      "telemetry_collectors": [{"agent_group": "default", "infra_meters": {"prometheus_simple":
      {"per_agent_group": true, "receivers": {"prometheus_simple": {"collection_interval":
      "1s", "endpoint": "hasura-postgresql-metrics.cloud.svc.cluster.local:9187",
      "tls": {"insecure_skip_verify": true}, "use_service_account": true}}}}}]}, "service_protection_core":
      {"adaptive_load_scheduler": {"load_scheduler": {"scheduler": {"workloads": [{"label_matcher":
      {"match_labels": {"source": "api-service.cloud.svc.cluster.local"}}, "name":
      "api-service", "parameters": {"priority": 200}}, {"label_matcher": {"match_labels":
      {"source": "agent-service.cloud.svc.cluster.local"}}, "name": "agent-service",
      "parameters": {"priority": 50}}]}, "selectors": [{"control_point": "ingress",
      "service": "hasura.cloud.svc.cluster.local"}]}}}, "setpoint": 3500}}'
  labels:
    fluxninja.com/validate: "true"
  name: workload-prioritization-hasura
spec:
  circuit:
    components:
    - flow_control:
        adaptive_load_scheduler:
          dry_run: false
          dry_run_config_key: dry_run
          in_ports:
            overload_confirmation:
              constant_signal:
                value: 1
            setpoint:
              signal_name: SETPOINT
            signal:
              signal_name: SIGNAL
          out_ports:
            desired_load_multiplier:
              signal_name: DESIRED_LOAD_MULTIPLIER
            observed_load_multiplier:
              signal_name: OBSERVED_LOAD_MULTIPLIER
          parameters:
            alerter:
              alert_name: Load Throttling Event
            gradient:
              max_gradient: 1
              min_gradient: 0.1
              slope: -1
            load_multiplier_linear_increment: 0.0025
            load_scheduler:
              scheduler:
                workloads:
                - label_matcher:
                    match_labels:
                      source: api-service.cloud.svc.cluster.local
                  name: api-service
                  parameters:
                    priority: 200
                - label_matcher:
                    match_labels:
                      source: agent-service.cloud.svc.cluster.local
                  name: agent-service
                  parameters:
                    priority: 50
              selectors:
              - control_point: ingress
                service: hasura.cloud.svc.cluster.local
            max_load_multiplier: 2
    - query:
        promql:
          evaluation_interval: 1s
          out_ports:
            output:
              signal_name: SIGNAL
          query_string: pg_db_queries_per_second{db="hasura"}
    - variable:
        constant_output:
          value: 3500
        out_ports:
          output:
            signal_name: SETPOINT
    evaluation_interval: 1s
  resources:
    flow_control:
      classifiers:
      - rego:
          labels:
            operation:
              telemetry: true
            source:
              telemetry: true
          module: |
            package hasura_example
            source = input.attributes.source.source_fqdns[0]
            operation = graphql.parse_query(input.parsed_body.query).Operations[_].Operation
        selectors:
        - control_point: ingress
          service: hasura.cloud.svc.cluster.local
    telemetry_collectors:
    - agent_group: default
      infra_meters:
        prometheus_simple:
          per_agent_group: true
          receivers:
            prometheus_simple:
              collection_interval: 1s
              endpoint: hasura-postgresql-metrics.cloud.svc.cluster.local:9187
              tls:
                insecure_skip_verify: true
              use_service_account: true
