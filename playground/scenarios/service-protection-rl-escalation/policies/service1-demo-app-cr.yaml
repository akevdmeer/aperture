apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  annotations:
    fluxninja.com/blueprint-name: policies/service-protection/average-latency
    fluxninja.com/blueprints-uri: local
    fluxninja.com/values:
      '{"policy": {"components": [{"decider": {"in_ports": {"lhs":
      {"signal_name": "DESIRED_LOAD_MULTIPLIER"}, "rhs": {"constant_signal": {"value":
      1}}}, "operator": "lt", "out_ports": {"output": {"signal_name": "IS_CRAWLER_ESCALATION"}},
      "true_for": "30s"}}, {"switcher": {"in_ports": {"off_signal": {"constant_signal":
      {"value": 10}}, "on_signal": {"constant_signal": {"value": 0}}, "switch": {"signal_name":
      "IS_CRAWLER_ESCALATION"}}, "out_ports": {"output": {"signal_name": "RATE_LIMIT"}}}},
      {"flow_control": {"rate_limiter": {"in_ports": {"bucket_capacity": {"signal_name":
      "RATE_LIMIT"}, "fill_amount": {"signal_name": "RATE_LIMIT"}}, "parameters":
      {"interval": "1s", "label_key": "http.request.header.user_id", "lazy_sync":
      {"enabled": true, "num_sync": 4}}, "selectors": [{"control_point": "ingress",
      "label_matcher": {"match_labels": {"http.request.header.user_type": "crawler"}},
      "service": "service1-demo-app.demoapp.svc.cluster.local"}]}}}], "latency_baseliner":
      {"flux_meter": {"selectors": [{"control_point": "ingress", "service": "service3-demo-app.demoapp.svc.cluster.local"}]}},
      "policy_name": "service1-demo-app", "resources": {"flow_control": {"classifiers":
      [{"rules": {"user_type": {"extractor": {"from": "request.http.headers.user-type"}}},
      "selectors": [{"control_point": "ingress", "service": "service1-demo-app.demoapp.svc.cluster.local"}]}]},
      "telemetry_collectors": [{"agent_group": "default", "infra_meters": {"kubetstats":
      {"per_agent_group": true, "pipeline": {"processors": ["k8sattributes"], "receivers":
      ["kubeletstats"]}, "processors": {"k8sattributes": {"config": {"auth_type":
      "serviceAccount", "extract": {"labels": [{"key_regex": "^app.kubernetes.io/.*"}],
      "metadata": ["k8s.daemonset.name", "k8s.cronjob.name", "k8s.deployment.name",
      "k8s.job.name", "k8s.namespace.name", "k8s.node.name", "k8s.pod.name", "k8s.pod.uid",
      "k8s.replicaset.name", "k8s.statefulset.name", "k8s.container.name"]}, "filter":
      {"node_from_env_var": "NODE_NAME"}, "passthrough": false, "pod_association":
      [{"sources": [{"from": "resource_attribute", "name": "k8s.pod.uid"}]}]}}}, "receivers":
      {"kubeletstats": {"config": {"auth_type": "serviceAccount", "collection_interval":
      "10s", "endpoint": "https://${NODE_NAME}:10250", "insecure_skip_verify": true,
      "metric_groups": ["pod", "container"]}}}}}}]}, "service_protection_core": {"adaptive_load_scheduler":
      {"load_multiplier_linear_increment": 0.0025000000000000001, "load_scheduler":
      {"scheduler": {"workloads": [{"label_matcher": {"match_labels": {"user_type":
      "guest"}}, "name": "guest", "parameters": {"priority": "50"}}, {"label_matcher":
      {"match_labels": {"http.request.header.user_type": "subscriber"}}, "name": "subscriber",
      "parameters": {"priority": "200"}}]}, "selectors": [{"control_point": "ingress",
      "service": "service1-demo-app.demoapp.svc.cluster.local"}]}}}}}'
  labels:
    fluxninja.com/validate: "true"
  name: service1-demo-app
spec:
  circuit:
    components:
    evaluation_interval: 1s
  resources:
    telemetry_collectors:
      - agent_group: default
        infra_meters:
          kubetstats:
            per_agent_group: true
            pipeline:
              processors:
                - k8sattributes
              receivers:
                - kubeletstats
            processors:
              k8sattributes:
                auth_type: serviceAccount
                extract:
                  labels:
                    - key_regex: ^app.kubernetes.io/.*
                  metadata:
                    - k8s.daemonset.name
                    - k8s.cronjob.name
                    - k8s.deployment.name
                    - k8s.job.name
                    - k8s.namespace.name
                    - k8s.node.name
                    - k8s.pod.name
                    - k8s.pod.uid
                    - k8s.replicaset.name
                    - k8s.statefulset.name
                    - k8s.container.name
                filter:
                  node_from_env_var: NODE_NAME
                passthrough: false
                pod_association:
                  - sources:
                      - from: resource_attribute
                        name: k8s.pod.uid
            receivers:
              kubeletstats:
                auth_type: serviceAccount
                collection_interval: 10s
                endpoint: https://${NODE_NAME}:10250
                insecure_skip_verify: true
                metric_groups:
                  - pod
                  - container
